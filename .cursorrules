## General Wasp Rules

- Use the latest Wasp version, as defined in the wasp config file (`main.wasp` or `*.wasp.ts`) in the root of the project.
- Always use typescript for Wasp code.
- When creating Wasp operations (queries and actions) combine them into an operations.ts file within the feature directory rather than into separate queries.ts and actions.ts files

## Wasp Import Rules

- Path to Wasp functions within .ts files must come from 'wasp', not '@wasp'!
  - Examples to follow ✅:
    - `import { Task } from 'wasp/entities'`
    - `import type { GetTasks } from 'wasp/server/operations'`
    - `import { getTasks, useQuery } from 'wasp/client/operations'`
  - Examples to avoid ❌:
    - `import { getTasks, useQuery } from '@wasp/...'`
    - `import { getTasks, useQuery } from '@src/feature/operations.ts'`
- Path to external imports within 'main.wasp' must start with "@src/"!
  - Examples to follow ✅:
    - `component: import { LoginPage } from "@src/client/pages/auth/LoginPage.tsx"`
  - Examples to avoid ❌:
    - `component: import { LoginPage } from "@client/pages/auth/LoginPage.tsx"`
- In the client's root component, use the Outlet component rather than children

## Wasp DB Schema Rules

- Add databse models to the `schema.prisma` file, NOT to `main.wasp` as "entities"
- Do NOT add a db.system nor a db.prisma property to the main wasp config file. This is taken care of in `schema.prisma`
- Keep the `schema.prisma` within the root of the project

## Wasp Operations

- Types are generated automatically from the function definition in the wasp config file
  - `import type { GetTimeLogs, CreateTimeLog, UpdateTimeLog } from 'wasp/server/operations'`
- Wasp also generates entity types based on the models in `schema.prisma`
  - `import type { Project, TimeLog } from 'wasp/entities'`
- Make sure that all Entities that should be included in the operations context are defined in its definition in the wasp config file
  - `action createTimeLog { fn: import { createTimeLog } from "@src/server/timeLogs/operations.js", entities: [TimeLog, Project] }`

## Wasp Auth

- When creating Auth pages, use the LoginForm and SignupForm components provided by Wasp
  - `import { LoginForm } from 'wasp/client/auth'`
- Wasp takes care of creating the user's auth model id, username, and password for a user, so a user model DOES NOT need these properties
  - `model User { id Int @id @default(autoincrement()) }`

## Wasp Dependencies

- Do NOT add dependencies to the wasp config file
- Install dependencies via `npm install` instead

## React

- Use relative imports for other react components
- If importing a function from an operations file, defer to the wasp import rules

## TailwindCSS

- Use Tailwind CSS for styling.
- Do not use inline styles unless necessary

## General

- Use single quotes