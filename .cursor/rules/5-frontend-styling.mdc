---
description: 
globs: 
alwaysApply: true
---
# 5. Frontend (React) and Styling (TailwindCSS)

This document outlines conventions for building the user interface with React and styling it with Tailwind CSS.

## React Conventions

- **Imports:**
  - Use relative paths to import other React components within the `src/` directory.
    - ✅ `import { MyButton } from '../components/MyButton';`
    - ❌ `import { MyButton } from '@src/components/MyButton';`
  
- **State Management:**
  - Use standard React hooks (`useState`, `useEffect`, `useReducer`) for component-level state.
  - Use Wasp Queries (`useQuery`) for fetching and managing server state on the client.
  - Consider React Context (`createContext`, `useContext`) for global UI state that doesn't need server persistence (e.g., theme, modal visibility) but avoid overusing it for state that belongs in specific components or on the server.
- **Error Handling (Client-side):**
  - Use `try/catch` blocks with `async/await` when calling Wasp Actions.
  - The `useQuery` hook provides `error` objects for handling query errors.
  - Consider implementing a global React Error Boundary component at a high level in your component tree (e.g., within the root component) to catch rendering errors gracefully.
    - See [React Docs on Error Boundaries](mdc:https:/react.dev/reference/react/Component#catching-rendering-errors-with-an-error-boundary).

## Shadcn/ui Components (`src/components`)

- This project utilizes components based on the [Shadcn/ui](mdc:https:/ui.shadcn.com) library, primarily located within the `src/components` directory and its subdirectories (e.g., `src/components/ui`).
- Many of these components follow patterns and styles inspired by common admin dashboard layouts built with Shadcn/ui.
- **Usage:** When building UI features, prefer using or adapting existing components from `src/components` to maintain visual consistency.
- **Customization:** Components are typically self-contained or rely on utilities (e.g., `cn` for merging Tailwind classes). Refer to the Shadcn/ui documentation for underlying principles if deeper customization is needed.
- **Adding New Components:** If adding new components inspired by Shadcn/ui, follow the existing structure and conventions within `src/components`.

## TailwindCSS Conventions

- **Primary Styling Method:** Use Tailwind CSS utility classes directly in your JSX for styling.
- **Avoid Inline Styles:** Generally avoid using the `style` prop unless absolutely necessary for dynamic styles that cannot be achieved with Tailwind classes.
- **Reusability:** For complex or frequently reused style combinations, consider:
  - Creating reusable React components that encapsulate the structure and styling.
  - If necessary, using `@apply` within a global CSS file (`src/client/index.css` or similar) to create custom reusable classes, but prefer component composition first.
    ```css
    /* Example in index.css */
    @tailwind base;
    @tailwind components;
    @tailwind utilities;

    .btn-primary {
      @apply px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-300;
    }
    ```
- **Responsive Design:** Use Tailwind's responsive prefixes (`sm:`, `md:`, `lg:`, `xl:`, `2xl:`) to apply styles conditionally based on screen size.
  - ✅ `<div class="w-full md:w-1/2 lg:w-1/3">...</div>`
- **Configuration:** If you need to customize Tailwind (e.g., add custom colors, fonts, spacing), modify the `@tailwind.config.js` file in the project root. 