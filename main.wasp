app vibeCodeWasp {
  wasp: {
    version: "^0.16.3"
  },
  title: "Vibe Coding with Wasp",
  head: [
    "<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />",
    "<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />",
    "<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin />",
    "<link href=\"https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&family=Manrope:wght@200..800&display=swap\" rel=\"stylesheet\" />"
  ],
  auth: {
    userEntity: User,
    methods: {
      email: {
        fromField: {
          name: "Budgeting Vibe",
          email: "noreply@budgetingvibe.com"
        },
        emailVerification: {
          clientRoute: EmailVerificationRoute
        },
        passwordReset: {
          clientRoute: PasswordResetRoute
        }
      },
      // google: {},
      // github: {},
    },
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/",
    onAfterSignup: import { handleNewUserSignup } from "@src/server/hooks.ts"
  },
  emailSender: {
    provider: Dummy
  },
  client: {
    rootComponent: import Main from "@src/main",
    setupFn: import QuerySetup from "@src/config/querySetup",
  },
  server: {
    middlewareConfigFn: import { serverMiddlewareFn } from "@src/config/serverSetup",
  },
}

//#region Auth Routes
route SignupRoute { path: "/sign-up", to: Signup }
page Signup {
  component: import { Signup } from "@src/features/auth/signup"
}

route LoginRoute { path: "/login", to: Login }
page Login {
  component: import { Login } from "@src/features/auth/login"
}

route EmailVerificationRoute { path: "/auth/verify-email/:token", to: EmailVerificationPage }
page EmailVerificationPage { component: import { EmailVerification } from "@src/features/auth/EmailVerificationPage.tsx" }

route PasswordResetRoute { path: "/auth/reset-password/:token", to: PasswordResetPage }
page PasswordResetPage { component: import { PasswordReset } from "@src/features/auth/PasswordResetPage.tsx" }
//#endregion

route DashboardRoute { path: "/", to: Dashboard }
page Dashboard {
  authRequired: true,
  component: import Dashboard from "@src/features/dashboard/index"
}

route ChatsRoute { path: "/chats", to: Chats }
page Chats {
  component: import Chats from "@src/features/chats/index"
}

route TasksRoute { path: "/tasks", to: Tasks }
page Tasks {
  component: import Tasks from "@src/features/tasks/index"
}

route AppsRoute { path: "/apps", to: Apps }
page Apps {
  component: import Apps from "@src/features/apps/index"
}

route UsersRoute { path: "/users", to: Users }
page Users {
  component: import Users from "@src/features/users/index"
}

route SettingsRoute { path: "/settings/*", to: Settings }
page Settings {
  component: import Settings from "@src/features/settings/index"
}

// TODO: add route
// route HelpCenterRoute { path: "/help-center", to: HelpCenter }
// page HelpCenter {
//   component: import { HelpCenter } from "@src/features/help-center/index"
// }

//#region Error Routes
route GeneralErrorRoute { path: "/500", to: GeneralError }
page GeneralError {
  component: import GeneralError from "@src/features/errors/general-error"
}

route NotFoundRoute { path: "/404", to: NotFound }
page NotFound {
  component: import NotFound from "@src/features/errors/not-found-error"
}

route ForbiddenRoute { path: "/403", to: Forbidden }
page Forbidden {
  component: import Forbidden from "@src/features/errors/forbidden"
}

route UnauthorizedRoute { path: "/401", to: Unauthorized }
page Unauthorized {
  component: import Unauthorized from "@src/features/errors/unauthorized-error"
}

route MaintenanceRoute { path: "/maintenance", to: Maintenance }
page Maintenance {
  component: import Maintenance from "@src/features/errors/maintenance-error"
}
//#endregion

//#region Budget
// Action to create a new Envelope
action createEnvelope {
  fn: import { createEnvelope } from "@src/features/budget/operations.ts",
  entities: [User, Budget, Envelope]
}

// Action to update an Envelope
action updateEnvelope {
  fn: import { updateEnvelope } from "@src/features/budget/operations.ts",
  entities: [User, Budget, Envelope]
}

// Action to delete an Envelope
action deleteEnvelope {
  fn: import { deleteEnvelope } from "@src/features/budget/operations.ts",
  entities: [User, Budget, Envelope]
}

// Query to get Envelopes for the user's budget
query getEnvelopes {
  fn: import { getEnvelopes } from "@src/features/budget/operations.ts",
  entities: [User, Budget, Envelope]
}

// Route and Page for Budget Management UI
route BudgetRoute { path: "/budget", to: BudgetPage }
page BudgetPage {
  component: import BudgetPage from "@src/features/budget/BudgetPage.tsx",
  authRequired: true // Correct syntax for requiring auth
}
//#endregion
