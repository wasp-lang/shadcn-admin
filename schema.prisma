datasource db {
  provider = "postgresql"
  // Wasp requires that the url is set to the DATABASE_URL environment variable.
  url      = env("DATABASE_URL")
}

// Wasp requires the `prisma-client-js` generator to be present.
generator client {
  provider = "prisma-client-js"
}

model Budget {
  id        String   @id @default(uuid())
  name      String   @default("My Budget") // Budget name, default included
  userId    String   // Foreign key for the owner
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade) // Relation to the owner

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Update relation field
  envelopes   Envelope[]
  transactions Transaction[]
  collaborators BudgetCollaborator[] // Add relation to collaborators
}

model Envelope {
  id        String   @id @default(uuid())
  name      String
  budgetId  String   // Foreign key to Budget
  budget    Budget   @relation(fields: [budgetId], references: [id], onDelete: Cascade) // Relation to Budget

  // Optional field for planned allocation - can be refined later
  allocatedAmount Float @default(0.0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation to Transactions (to be defined later)
  transactions Transaction[]
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)

  // Add this relation: User can own Budgets
  budgets   Budget[]
  collaborations BudgetCollaborator[] // Add relation to collaborations
}

// Add TransactionType enum
enum TransactionType {
  INCOME
  EXPENSE
}

// Add Transaction model
model Transaction {
  id          String   @id @default(uuid())
  date        DateTime
  description String
  amount      Float
  type        TransactionType // Use the enum defined above

  envelopeId String
  envelope   Envelope @relation(fields: [envelopeId], references: [id], onDelete: Cascade)

  budgetId String
  budget   Budget   @relation(fields: [budgetId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Add CollaboratorRole enum
enum CollaboratorRole {
  OWNER   // Can manage budget settings, envelopes, transactions, and collaborators
  EDITOR  // Can manage envelopes and transactions
  VIEWER  // Can only view envelopes and transactions
}

// Add BudgetCollaborator join table (Declared before being referenced)
model BudgetCollaborator {
  id        String   @id @default(uuid())
  budgetId  String
  userId    String
  role      CollaboratorRole @default(VIEWER)

  budget    Budget   @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  // Ensure a user can only have one role per budget
  @@unique([budgetId, userId])
}